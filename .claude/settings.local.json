{
  "permissions": {
    "allow": [
      "Bash(true)",
      "Bash(git rm:*)",
      "Bash(timeout 10s make run)",
      "Bash(timeout 30s uv run:*)",
      "Bash(export PROMPT=\"GoRogueのコードベースで、以下の機能が実装されているかを確認したい：\n1. 孤立部屋群（隠し通路でのみアクセス可能）\n2. 暗い部屋（照明なしでは視界効かない）\n\n調査観点：\n- 孤立部屋の生成ロジック\n- 隠し通路による接続システム  \n- 暗い部屋の実装（照明システム）\n- FOVシステムとの統合\n- Light効果との関連\n\n効果的なファイル検索方法と確認すべき箇所についてアドバイスをお願いします。\")",
      "Bash(./scripts/cli_test.sh:*)",
      "Bash(python:*)",
      "Bash(PYTHONPATH=/Users/tomo/github.com/yuru-sha/GoRogue/src python -c \"\nfrom GoRogue.entities.actors.monster import Monster\n\n# テスト用のモンスターを作成\nmonster = Monster(\n    char=''T'',\n    x=10,\n    y=10,\n    name=''Test Monster'',\n    level=1,\n    hp=10,\n    max_hp=10,\n    attack=5,\n    defense=2,\n    exp_value=100,\n    view_range=3,\n    color=(255, 255, 255)\n)\n\nprint(''Initial state:'')\nprint(f''HP: {monster.hp}/{monster.max_hp}'')\nprint(f''is_dead(): {monster.is_dead()}'')\nprint(f''is_alive: {monster.is_alive}'')\n\n# ダメージを与える\nmonster.take_damage(15)\nprint(''\\nAfter taking fatal damage:'')\nprint(f''HP: {monster.hp}/{monster.max_hp}'')\nprint(f''is_dead(): {monster.is_dead()}'')\nprint(f''is_alive: {monster.is_alive}'')\n\")",
      "Bash(touch:*)",
      "Bash(PYTHONPATH=src python test_gold_autopickup.py)",
      "Bash(rm:*)",
      "Bash(timeout 10 make run)",
      "Bash(DEBUG=1 python -c \"\nfrom GoRogue.map.dungeon.director import DungeonDirector\nfrom GoRogue.constants import ProbabilityConstants\nimport numpy as np\nprint(f''GONE_ROOM_CHANCE: {ProbabilityConstants.GONE_ROOM_CHANCE}'')\nprint(f''use_section_based: デフォルトでTrue'')\n\n# BSPダンジョンを生成してテスト\ndirector = DungeonDirector(80, 45, 1)\nprint(f''Director dungeon_type: {director.dungeon_type}'')\nprint(f''Director use_section_based: {director.use_section_based}'')\n\ntry:\n    tiles, start_pos, end_pos = director.build_dungeon()\n    print(f''Rooms generated: {len(director.rooms)}'')\n    stats = director.get_generation_statistics()\n    print(f''Stats: {stats}'')\nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=src DEBUG=1 python -c \"\nfrom GoRogue.map.dungeon.director import DungeonDirector\nfrom GoRogue.constants import ProbabilityConstants\nimport numpy as np\nprint(f''GONE_ROOM_CHANCE: {ProbabilityConstants.GONE_ROOM_CHANCE}'')\nprint(f''use_section_based: デフォルトでTrue'')\n\n# BSPダンジョンを生成してテスト\ndirector = DungeonDirector(80, 45, 1)\nprint(f''Director dungeon_type: {director.dungeon_type}'')\nprint(f''Director use_section_based: {director.use_section_based}'')\n\ntry:\n    tiles, start_pos, end_pos = director.build_dungeon()\n    print(f''Rooms generated: {len(director.rooms)}'')\n    \n    # 部屋の情報を詳細に表示\n    for i, room in enumerate(director.rooms):\n        print(f''Room {i}: size {room.width}x{room.height} at ({room.x}, {room.y})'')\n    \n    stats = director.get_generation_statistics()\n    print(f''Stats: {stats}'')\nexcept Exception as e:\n    print(f''Error: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=src DEBUG=1 python -c \"\nfrom GoRogue.map.dungeon.director import DungeonDirector\nfrom GoRogue.constants import ProbabilityConstants\nimport numpy as np\n\n# 階層2でテスト（迷路にならない階層）\nfor floor in [2, 3, 4, 5]:\n    print(f''\\n=== Floor {floor} ==='')\n    director = DungeonDirector(80, 45, floor)\n    print(f''Director dungeon_type: {director.dungeon_type}'')\n    \n    if director.dungeon_type == ''bsp'':\n        try:\n            tiles, start_pos, end_pos = director.build_dungeon()\n            print(f''Rooms generated: {len(director.rooms)}'')\n            \n            # 部屋の情報を詳細に表示\n            for i, room in enumerate(director.rooms):\n                print(f''  Room {i}: size {room.width}x{room.height} at ({room.x}, {room.y})'')\n            \n            stats = director.get_generation_statistics()\n            print(f''Floor coverage: {stats[\"\"floor_coverage\"\"]}'')\n            \n            # 1つの大きな部屋になっているかチェック\n            if len(director.rooms) == 1:\n                room = director.rooms[0]\n                area = room.width * room.height\n                total_area = 80 * 45\n                room_percentage = (area / total_area) * 100\n                print(f''  WARNING: Only 1 room! Area: {area} ({room_percentage:.1f}% of total)'')\n            \n        except Exception as e:\n            print(f''Error: {e}'')\n    else:\n        print(f''Skipped maze floor'')\n\")",
      "Bash(PYTHONPATH=src DEBUG=1 python -c \"\nfrom GoRogue.map.dungeon.section_based_builder import BSPDungeonBuilder\nfrom GoRogue.map.tile import Wall, Floor\nimport numpy as np\n\nprint(''BSP単体テスト'')\nbuilder = BSPDungeonBuilder(80, 45, min_section_size=8)\ntiles = np.full((45, 80), Wall(), dtype=object)\n\n# BSPダンジョンを生成\nrooms = builder.build_dungeon(tiles)\nprint(f''Generated rooms: {len(rooms)}'')\n\n# 実際に床タイルがどのくらい作られているかチェック\nfloor_count = 0\nfor y in range(45):\n    for x in range(80):\n        if isinstance(tiles[y, x], Floor):\n            floor_count += 1\n\nprint(f''Floor tiles created: {floor_count}'')\nprint(f''Coverage: {(floor_count / (80 * 45)) * 100:.1f}%'')\n\n# 部屋が実際に配置されているかチェック\nfor i, room in enumerate(rooms):\n    room_floor_count = 0\n    # 部屋の内部をチェック\n    for y in range(room.y + 1, room.y + room.height - 1):\n        for x in range(room.x + 1, room.x + room.width - 1):\n            if 0 <= x < 80 and 0 <= y < 45:\n                if isinstance(tiles[y, x], Floor):\n                    room_floor_count += 1\n    print(f''Room {i}: {room_floor_count} floor tiles in interior'')\n\n# 統計情報を取得\nstats = builder.get_statistics()\nprint(f''Builder stats: {stats}'')\n\")",
      "Bash(PYTHONPATH=src DEBUG=1 python -c \"\nfrom GoRogue.map.dungeon.director import DungeonDirector\nimport json\n\n# 階層5でテスト\ndirector = DungeonDirector(80, 45, 5)\nprint(f''Director dungeon_type: {director.dungeon_type}'')\n\nif director.dungeon_type == ''bsp'':\n    try:\n        tiles, start_pos, end_pos = director.build_dungeon()\n        print(f''\\nRooms generated: {len(director.rooms)}'')\n        \n        # 部屋の接続情報を詳しく調べる\n        print(''\\nRoom connectivity:'')\n        for i, room in enumerate(director.rooms):\n            print(f''  Room {i} (id={room.id}): connected to {room.connected_rooms}'')\n        \n        # 検証レポートを取得\n        report = director.validation_manager.get_validation_report()\n        print(f''\\nValidation Report:'')\n        print(f''  Total tests: {report[\"\"summary\"\"][\"\"total_tests\"\"]}'')\n        print(f''  Passed: {report[\"\"summary\"\"][\"\"passed_tests\"\"]}'')\n        print(f''  Failed: {report[\"\"summary\"\"][\"\"failed_tests\"\"]}'')\n        print(f''  Warnings: {report[\"\"summary\"\"][\"\"warnings\"\"]}'')\n        \n        print(''\\nFailed tests:'')\n        for result in report[''results'']:\n            if not result[''passed'']:\n                print(f''  - {result[\"\"test\"\"]}: {result[\"\"message\"\"]}'')\n        \n        print(''\\nWarnings:'')\n        for warning in report.get(''warnings'', []):\n            print(f''  - {warning}'')\n            \n    except Exception as e:\n        print(f''Error: {e}'')\n        import traceback\n        traceback.print_exc()\nelse:\n    print(''Skipped maze floor'')\n\")",
      "Bash(timeout 10s uv run:*)",
      "Bash(DEBUG=1 timeout 5s uv run python -m GoRogue.main --cli)",
      "Bash(gemini:*)",
      "Bash(PYTHONPATH=/Users/tomo/github.com/yuru-sha/GoRogue/src python -c \"\nfrom GoRogue.map.dungeon.director import DungeonDirector\nfrom GoRogue.map.tile import Floor\n\nprint(''=== BSPシステム（現在）==='')\ndirector_bsp = DungeonDirector(80, 24, 1)\ndirector_bsp.use_section_based = True\ntiles_bsp, start_bsp, end_bsp = director_bsp.build_dungeon()\n\nprint(f''部屋数: {len(director_bsp.rooms)}'')\nprint(f''開始位置: {start_bsp}'')\nprint(f''終了位置: {end_bsp}'')\n\n# 床タイルの分布を確認\nfloor_count = sum(1 for y in range(24) for x in range(80) if isinstance(tiles_bsp[y,x], Floor))\nprint(f''床タイル数: {floor_count}'')\n\nprint(''\\n=== 従来システム ==='')\ndirector_legacy = DungeonDirector(80, 24, 1)\ndirector_legacy.use_section_based = False\ntiles_legacy, start_legacy, end_legacy = director_legacy.build_dungeon()\n\nprint(f''部屋数: {len(director_legacy.rooms)}'')\nprint(f''通路数: {len(director_legacy.corridors)}'')\nprint(f''開始位置: {start_legacy}'')\nprint(f''終了位置: {end_legacy}'')\n\n# 床タイルの分布を確認\nfloor_count_legacy = sum(1 for y in range(24) for x in range(80) if isinstance(tiles_legacy[y,x], Floor))\nprint(f''床タイル数: {floor_count_legacy}'')\n\")",
      "Bash(PYTHONPATH=/Users/tomo/github.com/yuru-sha/GoRogue/src python -c \"\nfrom GoRogue.map.dungeon.director import DungeonDirector\nfrom GoRogue.map.tile import Floor, Wall, Door\n\ndef visualize_dungeon(tiles, title):\n    print(f''\\n=== {title} ==='')\n    height, width = tiles.shape\n    for y in range(min(20, height)):  # 最初の20行のみ表示\n        line = ''''\n        for x in range(min(60, width)):  # 最初の60列のみ表示\n            tile = tiles[y, x]\n            if isinstance(tile, Floor):\n                line += ''.''\n            elif isinstance(tile, Wall):\n                line += ''#''\n            elif isinstance(tile, Door):\n                line += ''+''\n            else:\n                line += ''?''\n        print(line)\n\n# BSPシステムのダンジョン\ndirector_bsp = DungeonDirector(60, 20, 1)\ndirector_bsp.use_section_based = True\ntiles_bsp, _, _ = director_bsp.build_dungeon()\nvisualize_dungeon(tiles_bsp, ''BSPシステム（問題あり）'')\n\n# 従来システムのダンジョン  \ndirector_legacy = DungeonDirector(60, 20, 1)\ndirector_legacy.use_section_based = False\ntiles_legacy, _, _ = director_legacy.build_dungeon()\nvisualize_dungeon(tiles_legacy, ''従来システム（正しい構造）'')\n\")",
      "Bash(DEBUG=1 timeout 3s uv run python -m GoRogue.main --cli)",
      "WebFetch(domain:python-tcod.readthedocs.io)",
      "WebFetch(domain:www.roguebasin.com)",
      "Bash(uv pip:*)",
      "Bash(DEBUG=1 uv run python test_door_generation.py)",
      "Bash(DEBUG=1 uv run python check_door_placement.py)",
      "Bash(DEBUG=1 uv run python test_fixed_door_placement.py)",
      "Bash(DEBUG=1 uv run python test_perfect_door_placement.py)",
      "Bash(DEBUG=1 uv run python test_corridor_colors.py)",
      "Bash(ruff check:*)",
      "Bash(SKIP=ruff git commit -m \"$(cat <<''EOF''\nfix: Correct room spacing test calculation and ensure minimum 3-tile spacing\n\n- Fix room distance calculation in test_room_spacing() to accurately measure gaps between rooms\n- Increase BSP_MIN_SIZE from 5 to 8 to ensure adequate room spacing\n- Add 2-tile margin around rooms within BSP sections\n- Increase BSP split minimum size to min_size + 4 for proper separation\n- All dungeon tests now pass with proper room spacing validation\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "mcp__ide__getDiagnostics",
      "Bash(rg:*)",
      "WebFetch(domain:britzl.github.io)",
      "Bash(cat:*)",
      "Bash(timeout:*)",
      "Bash(DEBUG=1 LOG_LEVEL=DEBUG uv run python -c \"\nfrom GoRogue.utils.logger import setup_game_logger\nlogger = setup_game_logger()\nlogger.debug(''Debug message'')\nlogger.info(''Info message'')\nprint(''Logger setup successful'')\nprint(f''Logger level: {logger.level}'')\nprint(f''Handler count: {len(logger.handlers)}'')\n\")",
      "Bash(DEBUG=0 LOG_LEVEL=INVALID uv run python -c \"\nfrom GoRogue.utils.logger import setup_game_logger\nlogger = setup_game_logger()\nlogger.debug(''Debug message'')\nlogger.info(''Info message'')\nprint(''Logger setup successful'')\nprint(f''Logger level: {logger.level}'')\n\")",
      "Bash(PYTHONPATH=/Users/tomo/github.com/yuru-sha/GoRogue/src python -m GoRogue.main --cli)",
      "WebFetch(domain:strategywiki.org)",
      "Bash(export:*)",
      "WebFetch(domain:github.com)",
      "Bash(go mod:*)",
      "Bash(go build:*)",
      "WebFetch(domain:pkg.go.dev)",
      "Bash(go clean:*)",
      "Bash(go doc:*)",
      "Bash(go get:*)",
      "Bash(go vet:*)",
      "Bash(go fmt:*)",
      "Bash(go test:*)",
      "Bash(golangci-lint:*)"
    ],
    "deny": []
  }
}